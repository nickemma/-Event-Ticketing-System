// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: audit_log.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    action, entity_type, entity_id, user_id
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, action, entity_type, entity_id, user_id, timestamp
`

type CreateAuditLogParams struct {
	Action     string      `json:"action"`
	EntityType string      `json:"entity_type"`
	EntityID   int64       `json:"entity_id"`
	UserID     pgtype.Int8 `json:"user_id"`
}

// Create an audit log entry (e.g., when a user creates an event, called after critical actions)
func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.Action,
		arg.EntityType,
		arg.EntityID,
		arg.UserID,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.EntityType,
		&i.EntityID,
		&i.UserID,
		&i.Timestamp,
	)
	return i, err
}

const listAuditLogs = `-- name: ListAuditLogs :many
SELECT id, action, entity_type, entity_id, user_id, timestamp FROM audit_logs
ORDER BY timestamp DESC
    LIMIT $1 OFFSET $2
`

type ListAuditLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// List all logs (admin-only review)
func (q *Queries) ListAuditLogs(ctx context.Context, arg ListAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.EntityType,
			&i.EntityID,
			&i.UserID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
