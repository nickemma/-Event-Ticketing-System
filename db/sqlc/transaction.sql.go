// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    user_id, ticket_id, quantity, total_amount, status
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id, user_id, ticket_id, quantity, total_amount, status, created_at
`

type CreateTransactionParams struct {
	UserID      int64          `json:"user_id"`
	TicketID    int64          `json:"ticket_id"`
	Quantity    int32          `json:"quantity"`
	TotalAmount pgtype.Numeric `json:"total_amount"`
	Status      pgtype.Text    `json:"status"`
}

// Create a transaction (e.g., when a user buys tickets)
func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.UserID,
		arg.TicketID,
		arg.Quantity,
		arg.TotalAmount,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions
WHERE id = $1
`

// Delete a transaction (use cautiously!)
func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, ticket_id, quantity, total_amount, status, created_at FROM transactions
WHERE id = $1 AND user_id = $2
`

type GetTransactionParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

// Get transaction details by ID (user-specific)
func (q *Queries) GetTransaction(ctx context.Context, arg GetTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, arg.ID, arg.UserID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionsByUser = `-- name: ListTransactionsByUser :many

SELECT id, user_id, ticket_id, quantity, total_amount, status, created_at FROM transactions
WHERE user_id = $1
ORDER BY created_at DESC
`

// User can only view their own
// List all transactions for a user
func (q *Queries) ListTransactionsByUser(ctx context.Context, userID int64) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TicketID,
			&i.Quantity,
			&i.TotalAmount,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :one
UPDATE transactions
SET status = $2
WHERE id = $1
    RETURNING id, user_id, ticket_id, quantity, total_amount, status, created_at
`

type UpdateTransactionStatusParams struct {
	ID     int64       `json:"id"`
	Status pgtype.Text `json:"status"`
}

// Update transaction status (e.g., "success" after payment, admin/organizer action)
func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransactionStatus, arg.ID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TicketID,
		&i.Quantity,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
