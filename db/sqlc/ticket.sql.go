// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ticket.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO tickets (
    event_id, type, price, quantity_available
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, event_id, type, price, quantity_available, created_at
`

type CreateTicketParams struct {
	EventID           int64          `json:"event_id"`
	Type              string         `json:"type"`
	Price             pgtype.Numeric `json:"price"`
	QuantityAvailable int32          `json:"quantity_available"`
}

// Create ticket (organizer_id inferred from event)
func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRow(ctx, createTicket,
		arg.EventID,
		arg.Type,
		arg.Price,
		arg.QuantityAvailable,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.Price,
		&i.QuantityAvailable,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM tickets
WHERE id = $1
`

// Delete ticket (organizer-only)
func (q *Queries) DeleteTicket(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTicket, id)
	return err
}

const getTicket = `-- name: GetTicket :one
SELECT id, event_id, type, price, quantity_available, created_at FROM tickets
WHERE id = $1
`

// Get ticket details by ID (public)
func (q *Queries) GetTicket(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRow(ctx, getTicket, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.Price,
		&i.QuantityAvailable,
		&i.CreatedAt,
	)
	return i, err
}

const listTicketsByEvent = `-- name: ListTicketsByEvent :many
SELECT id, event_id, type, price, quantity_available, created_at FROM tickets
WHERE event_id = $1
ORDER BY type
`

// List all tickets for an event (public)
func (q *Queries) ListTicketsByEvent(ctx context.Context, eventID int64) ([]Ticket, error) {
	rows, err := q.db.Query(ctx, listTicketsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Type,
			&i.Price,
			&i.QuantityAvailable,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE tickets
SET
    quantity_available = $2,
    price = $3
WHERE id = $1
    RETURNING id, event_id, type, price, quantity_available, created_at
`

type UpdateTicketParams struct {
	ID                int64          `json:"id"`
	QuantityAvailable int32          `json:"quantity_available"`
	Price             pgtype.Numeric `json:"price"`
}

// Update ticket (organizer-only via event ownership)
func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (Ticket, error) {
	row := q.db.QueryRow(ctx, updateTicket, arg.ID, arg.QuantityAvailable, arg.Price)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.Price,
		&i.QuantityAvailable,
		&i.CreatedAt,
	)
	return i, err
}
