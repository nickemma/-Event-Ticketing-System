// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: event.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    organizer_id, title, description, venue, start_time, end_time
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, organizer_id, title, description, venue, start_time, end_time, created_at
`

type CreateEventParams struct {
	OrganizerID int64              `json:"organizer_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	Venue       string             `json:"venue"`
	StartTime   pgtype.Timestamptz `json:"start_time"`
	EndTime     pgtype.Timestamptz `json:"end_time"`
}

// Create event (organizer_id comes from JWT)
func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.OrganizerID,
		arg.Title,
		arg.Description,
		arg.Venue,
		arg.StartTime,
		arg.EndTime,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Title,
		&i.Description,
		&i.Venue,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1 AND organizer_id = $2
`

type DeleteEventParams struct {
	ID          int64 `json:"id"`
	OrganizerID int64 `json:"organizer_id"`
}

// Delete event (organizer-only)
func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) error {
	_, err := q.db.Exec(ctx, deleteEvent, arg.ID, arg.OrganizerID)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, organizer_id, title, description, venue, start_time, end_time, created_at FROM events
WHERE id = $1
`

// Get event details by ID (public)
func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Title,
		&i.Description,
		&i.Venue,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
	)
	return i, err
}

const listEventsByOrganizer = `-- name: ListEventsByOrganizer :many
SELECT id, organizer_id, title, description, venue, start_time, end_time, created_at FROM events
WHERE organizer_id = $1
ORDER BY start_time DESC
    LIMIT $2 OFFSET $3
`

type ListEventsByOrganizerParams struct {
	OrganizerID int64 `json:"organizer_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

// List organizer's events (for dashboard)
func (q *Queries) ListEventsByOrganizer(ctx context.Context, arg ListEventsByOrganizerParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByOrganizer, arg.OrganizerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.OrganizerID,
			&i.Title,
			&i.Description,
			&i.Venue,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicEvents = `-- name: ListPublicEvents :many
SELECT id, organizer_id, title, description, venue, start_time, end_time, created_at FROM events
WHERE start_time > NOW()  -- Only future events
ORDER BY start_time DESC
    LIMIT $1 OFFSET $2
`

type ListPublicEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// List public events (for users)
func (q *Queries) ListPublicEvents(ctx context.Context, arg ListPublicEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listPublicEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.OrganizerID,
			&i.Title,
			&i.Description,
			&i.Venue,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
    title = COALESCE($2, title),
    description = COALESCE($3, description),
    venue = COALESCE($4, venue),
    start_time = COALESCE($5, start_time),
    end_time = COALESCE($6, end_time)
WHERE id = $1 AND organizer_id = $7  -- Enforce organizer ownership
    RETURNING id, organizer_id, title, description, venue, start_time, end_time, created_at
`

type UpdateEventParams struct {
	ID          int64              `json:"id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	Venue       string             `json:"venue"`
	StartTime   pgtype.Timestamptz `json:"start_time"`
	EndTime     pgtype.Timestamptz `json:"end_time"`
	OrganizerID int64              `json:"organizer_id"`
}

// Update event details (only organizer can modify)
func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Venue,
		arg.StartTime,
		arg.EndTime,
		arg.OrganizerID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.OrganizerID,
		&i.Title,
		&i.Description,
		&i.Venue,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
	)
	return i, err
}
